{"ast":null,"code":"/**\n * Export utilities for whiteboard and notes\n */\n\n/**\n * Export canvas as PNG image\n * @param {HTMLCanvasElement} canvas - Canvas element to export\n * @param {string} filename - Filename for the download\n */\nexport const exportCanvasAsPNG = (canvas, filename = 'whiteboard.png') => {\n  try {\n    // Create a new canvas with white background\n    const exportCanvas = document.createElement('canvas');\n    const exportCtx = exportCanvas.getContext('2d');\n    exportCanvas.width = canvas.width;\n    exportCanvas.height = canvas.height;\n\n    // Fill with white background\n    exportCtx.fillStyle = '#ffffff';\n    exportCtx.fillRect(0, 0, exportCanvas.width, exportCanvas.height);\n\n    // Draw the original canvas content\n    exportCtx.drawImage(canvas, 0, 0);\n\n    // Create download link\n    exportCanvas.toBlob(blob => {\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }, 'image/png');\n    return true;\n  } catch (error) {\n    console.error('Error exporting canvas:', error);\n    return false;\n  }\n};\n\n/**\n * Export notes as text file\n * @param {string} content - Notes content to export\n * @param {string} filename - Filename for the download\n */\nexport const exportNotesAsText = (content, filename = 'notes.txt') => {\n  try {\n    // Add timestamp header\n    const timestamp = new Date().toLocaleString();\n    const exportContent = `Collaborative Notes - Exported on ${timestamp}\\n\\n${content}`;\n\n    // Create blob and download\n    const blob = new Blob([exportContent], {\n      type: 'text/plain'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    console.error('Error exporting notes:', error);\n    return false;\n  }\n};\n\n/**\n * Generate filename with timestamp\n * @param {string} baseName - Base filename\n * @param {string} extension - File extension\n * @returns {string} Filename with timestamp\n */\nexport const generateTimestampedFilename = (baseName, extension) => {\n  const now = new Date();\n  const timestamp = now.toISOString().slice(0, 19).replace(/[:.]/g, '-');\n  return `${baseName}_${timestamp}.${extension}`;\n};\n\n/**\n * Copy content to clipboard\n * @param {string} content - Content to copy\n * @returns {Promise<boolean>} Success status\n */\nexport const copyToClipboard = async content => {\n  try {\n    if (navigator.clipboard && window.isSecureContext) {\n      await navigator.clipboard.writeText(content);\n      return true;\n    } else {\n      // Fallback for older browsers\n      const textArea = document.createElement('textarea');\n      textArea.value = content;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-999999px';\n      textArea.style.top = '-999999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      const success = document.execCommand('copy');\n      textArea.remove();\n      return success;\n    }\n  } catch (error) {\n    console.error('Error copying to clipboard:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["exportCanvasAsPNG","canvas","filename","exportCanvas","document","createElement","exportCtx","getContext","width","height","fillStyle","fillRect","drawImage","toBlob","blob","url","URL","createObjectURL","link","href","download","body","appendChild","click","removeChild","revokeObjectURL","error","console","exportNotesAsText","content","timestamp","Date","toLocaleString","exportContent","Blob","type","generateTimestampedFilename","baseName","extension","now","toISOString","slice","replace","copyToClipboard","navigator","clipboard","window","isSecureContext","writeText","textArea","value","style","position","left","top","focus","select","success","execCommand","remove"],"sources":["/Users/jitmisra/Desktop/CollabBoard/frontend/src/utils/export.js"],"sourcesContent":["/**\n * Export utilities for whiteboard and notes\n */\n\n/**\n * Export canvas as PNG image\n * @param {HTMLCanvasElement} canvas - Canvas element to export\n * @param {string} filename - Filename for the download\n */\nexport const exportCanvasAsPNG = (canvas, filename = 'whiteboard.png') => {\n  try {\n    // Create a new canvas with white background\n    const exportCanvas = document.createElement('canvas');\n    const exportCtx = exportCanvas.getContext('2d');\n    \n    exportCanvas.width = canvas.width;\n    exportCanvas.height = canvas.height;\n    \n    // Fill with white background\n    exportCtx.fillStyle = '#ffffff';\n    exportCtx.fillRect(0, 0, exportCanvas.width, exportCanvas.height);\n    \n    // Draw the original canvas content\n    exportCtx.drawImage(canvas, 0, 0);\n    \n    // Create download link\n    exportCanvas.toBlob((blob) => {\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }, 'image/png');\n    \n    return true;\n  } catch (error) {\n    console.error('Error exporting canvas:', error);\n    return false;\n  }\n};\n\n/**\n * Export notes as text file\n * @param {string} content - Notes content to export\n * @param {string} filename - Filename for the download\n */\nexport const exportNotesAsText = (content, filename = 'notes.txt') => {\n  try {\n    // Add timestamp header\n    const timestamp = new Date().toLocaleString();\n    const exportContent = `Collaborative Notes - Exported on ${timestamp}\\n\\n${content}`;\n    \n    // Create blob and download\n    const blob = new Blob([exportContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    return true;\n  } catch (error) {\n    console.error('Error exporting notes:', error);\n    return false;\n  }\n};\n\n/**\n * Generate filename with timestamp\n * @param {string} baseName - Base filename\n * @param {string} extension - File extension\n * @returns {string} Filename with timestamp\n */\nexport const generateTimestampedFilename = (baseName, extension) => {\n  const now = new Date();\n  const timestamp = now.toISOString().slice(0, 19).replace(/[:.]/g, '-');\n  return `${baseName}_${timestamp}.${extension}`;\n};\n\n/**\n * Copy content to clipboard\n * @param {string} content - Content to copy\n * @returns {Promise<boolean>} Success status\n */\nexport const copyToClipboard = async (content) => {\n  try {\n    if (navigator.clipboard && window.isSecureContext) {\n      await navigator.clipboard.writeText(content);\n      return true;\n    } else {\n      // Fallback for older browsers\n      const textArea = document.createElement('textarea');\n      textArea.value = content;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-999999px';\n      textArea.style.top = '-999999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      const success = document.execCommand('copy');\n      textArea.remove();\n      return success;\n    }\n  } catch (error) {\n    console.error('Error copying to clipboard:', error);\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}