{"ast":null,"code":"import _objectSpread from\"/Users/jitmisra/Desktop/ralwayhackathon/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Local storage utilities for user session management\nconst USER_STORAGE_KEY='whiteboard_user';/**\n * Store user data in localStorage\n * @param {Object} userData - User data to store\n */export const storeUser=userData=>{try{const dataToStore=_objectSpread(_objectSpread({},userData),{},{timestamp:Date.now()});localStorage.setItem(USER_STORAGE_KEY,JSON.stringify(dataToStore));}catch(error){console.error('Error storing user data:',error);}};/**\n * Retrieve user data from localStorage\n * @returns {Object|null} User data or null if not found/expired\n */export const getStoredUser=()=>{try{const stored=localStorage.getItem(USER_STORAGE_KEY);if(!stored)return null;const userData=JSON.parse(stored);// Check if data is older than 24 hours\nconst twentyFourHours=24*60*60*1000;if(Date.now()-userData.timestamp>twentyFourHours){clearStoredUser();return null;}return userData;}catch(error){console.error('Error retrieving user data:',error);clearStoredUser();return null;}};/**\n * Clear user data from localStorage\n */export const clearStoredUser=()=>{try{localStorage.removeItem(USER_STORAGE_KEY);}catch(error){console.error('Error clearing user data:',error);}};/**\n * Update stored user data\n * @param {Object} updates - Updates to apply to stored user data\n */export const updateStoredUser=updates=>{try{const currentUser=getStoredUser();if(currentUser){const updatedUser=_objectSpread(_objectSpread({},currentUser),updates);storeUser(updatedUser);}}catch(error){console.error('Error updating user data:',error);}};","map":{"version":3,"names":["USER_STORAGE_KEY","storeUser","userData","dataToStore","_objectSpread","timestamp","Date","now","localStorage","setItem","JSON","stringify","error","console","getStoredUser","stored","getItem","parse","twentyFourHours","clearStoredUser","removeItem","updateStoredUser","updates","currentUser","updatedUser"],"sources":["/Users/jitmisra/Desktop/ralwayhackathon/frontend/src/utils/storage.js"],"sourcesContent":["// Local storage utilities for user session management\n\nconst USER_STORAGE_KEY = 'whiteboard_user';\n\n/**\n * Store user data in localStorage\n * @param {Object} userData - User data to store\n */\nexport const storeUser = (userData) => {\n  try {\n    const dataToStore = {\n      ...userData,\n      timestamp: Date.now()\n    };\n    localStorage.setItem(USER_STORAGE_KEY, JSON.stringify(dataToStore));\n  } catch (error) {\n    console.error('Error storing user data:', error);\n  }\n};\n\n/**\n * Retrieve user data from localStorage\n * @returns {Object|null} User data or null if not found/expired\n */\nexport const getStoredUser = () => {\n  try {\n    const stored = localStorage.getItem(USER_STORAGE_KEY);\n    if (!stored) return null;\n\n    const userData = JSON.parse(stored);\n    \n    // Check if data is older than 24 hours\n    const twentyFourHours = 24 * 60 * 60 * 1000;\n    if (Date.now() - userData.timestamp > twentyFourHours) {\n      clearStoredUser();\n      return null;\n    }\n\n    return userData;\n  } catch (error) {\n    console.error('Error retrieving user data:', error);\n    clearStoredUser();\n    return null;\n  }\n};\n\n/**\n * Clear user data from localStorage\n */\nexport const clearStoredUser = () => {\n  try {\n    localStorage.removeItem(USER_STORAGE_KEY);\n  } catch (error) {\n    console.error('Error clearing user data:', error);\n  }\n};\n\n/**\n * Update stored user data\n * @param {Object} updates - Updates to apply to stored user data\n */\nexport const updateStoredUser = (updates) => {\n  try {\n    const currentUser = getStoredUser();\n    if (currentUser) {\n      const updatedUser = { ...currentUser, ...updates };\n      storeUser(updatedUser);\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n  }\n};"],"mappings":"qIAAA;AAEA,KAAM,CAAAA,gBAAgB,CAAG,iBAAiB,CAE1C;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,SAAS,CAAIC,QAAQ,EAAK,CACrC,GAAI,CACF,KAAM,CAAAC,WAAW,CAAAC,aAAA,CAAAA,aAAA,IACZF,QAAQ,MACXG,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EACtB,CACDC,YAAY,CAACC,OAAO,CAACT,gBAAgB,CAAEU,IAAI,CAACC,SAAS,CAACR,WAAW,CAAC,CAAC,CACrE,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,aAAa,CAAGA,CAAA,GAAM,CACjC,GAAI,CACF,KAAM,CAAAC,MAAM,CAAGP,YAAY,CAACQ,OAAO,CAAChB,gBAAgB,CAAC,CACrD,GAAI,CAACe,MAAM,CAAE,MAAO,KAAI,CAExB,KAAM,CAAAb,QAAQ,CAAGQ,IAAI,CAACO,KAAK,CAACF,MAAM,CAAC,CAEnC;AACA,KAAM,CAAAG,eAAe,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAC3C,GAAIZ,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGL,QAAQ,CAACG,SAAS,CAAGa,eAAe,CAAE,CACrDC,eAAe,CAAC,CAAC,CACjB,MAAO,KAAI,CACb,CAEA,MAAO,CAAAjB,QAAQ,CACjB,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnDO,eAAe,CAAC,CAAC,CACjB,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAA,eAAe,CAAGA,CAAA,GAAM,CACnC,GAAI,CACFX,YAAY,CAACY,UAAU,CAACpB,gBAAgB,CAAC,CAC3C,CAAE,MAAOY,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAS,gBAAgB,CAAIC,OAAO,EAAK,CAC3C,GAAI,CACF,KAAM,CAAAC,WAAW,CAAGT,aAAa,CAAC,CAAC,CACnC,GAAIS,WAAW,CAAE,CACf,KAAM,CAAAC,WAAW,CAAApB,aAAA,CAAAA,aAAA,IAAQmB,WAAW,EAAKD,OAAO,CAAE,CAClDrB,SAAS,CAACuB,WAAW,CAAC,CACxB,CACF,CAAE,MAAOZ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}