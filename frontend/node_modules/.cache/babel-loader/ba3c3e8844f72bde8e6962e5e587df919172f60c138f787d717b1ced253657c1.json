{"ast":null,"code":"var _jsxFileName = \"/Users/jitmisra/Desktop/ralwayhackathon/frontend/src/components/AITextRecognition.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AITextRecognition = ({\n  socket,\n  roomId,\n  showToast\n}) => {\n  _s();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [recognizedText, setRecognizedText] = useState('');\n  const processDrawingToText = async canvasData => {\n    setIsProcessing(true);\n    try {\n      // Simulate AI text recognition (in real app, you'd use OCR API)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Mock recognized text based on drawing patterns\n      const mockTexts = [\"Meeting Notes: Discuss project timeline\", \"Ideas: Innovation, Collaboration, Growth\", \"Action Items: 1. Review code 2. Update docs\", \"Brainstorm: New features for Q2\", \"Goals: Increase user engagement by 25%\"];\n      const text = mockTexts[Math.floor(Math.random() * mockTexts.length)];\n      setRecognizedText(text);\n\n      // Send to other users\n      socket.emit('ai-text-recognized', {\n        roomId,\n        text,\n        timestamp: new Date(),\n        user: socket.username\n      });\n      showToast('Text recognized from drawing!', 'success');\n    } catch (error) {\n      showToast('Failed to recognize text', 'error');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(recognizedText);\n    showToast('Text copied to clipboard!', 'success');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-white border-b border-gray-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-sm font-medium text-gray-900\",\n        children: \"AI Text Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => processDrawingToText(),\n        disabled: isProcessing,\n        className: \"px-3 py-1 bg-purple-600 text-white text-xs rounded-md hover:bg-purple-700 disabled:opacity-50\",\n        children: isProcessing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animate-spin h-3 w-3 border border-white border-t-transparent rounded-full mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), \"Processing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this) : 'Recognize Text'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), recognizedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-50 p-3 rounded-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-700 mb-2\",\n        children: recognizedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: copyToClipboard,\n        className: \"text-xs text-purple-600 hover:text-purple-800\",\n        children: \"Copy to clipboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(AITextRecognition, \"gko8UzTXIN2nhHPJ2RRmpFrtPNQ=\");\n_c = AITextRecognition;\nexport default AITextRecognition;\nvar _c;\n$RefreshReg$(_c, \"AITextRecognition\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AITextRecognition","socket","roomId","showToast","_s","isProcessing","setIsProcessing","recognizedText","setRecognizedText","processDrawingToText","canvasData","Promise","resolve","setTimeout","mockTexts","text","Math","floor","random","length","emit","timestamp","Date","user","username","error","copyToClipboard","navigator","clipboard","writeText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/jitmisra/Desktop/ralwayhackathon/frontend/src/components/AITextRecognition.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst AITextRecognition = ({ socket, roomId, showToast }) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [recognizedText, setRecognizedText] = useState('');\n\n  const processDrawingToText = async (canvasData) => {\n    setIsProcessing(true);\n    try {\n      // Simulate AI text recognition (in real app, you'd use OCR API)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mock recognized text based on drawing patterns\n      const mockTexts = [\n        \"Meeting Notes: Discuss project timeline\",\n        \"Ideas: Innovation, Collaboration, Growth\",\n        \"Action Items: 1. Review code 2. Update docs\",\n        \"Brainstorm: New features for Q2\",\n        \"Goals: Increase user engagement by 25%\"\n      ];\n      \n      const text = mockTexts[Math.floor(Math.random() * mockTexts.length)];\n      setRecognizedText(text);\n      \n      // Send to other users\n      socket.emit('ai-text-recognized', {\n        roomId,\n        text,\n        timestamp: new Date(),\n        user: socket.username\n      });\n      \n      showToast('Text recognized from drawing!', 'success');\n    } catch (error) {\n      showToast('Failed to recognize text', 'error');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(recognizedText);\n    showToast('Text copied to clipboard!', 'success');\n  };\n\n  return (\n    <div className=\"p-4 bg-white border-b border-gray-200\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-sm font-medium text-gray-900\">AI Text Recognition</h3>\n        <button\n          onClick={() => processDrawingToText()}\n          disabled={isProcessing}\n          className=\"px-3 py-1 bg-purple-600 text-white text-xs rounded-md hover:bg-purple-700 disabled:opacity-50\"\n        >\n          {isProcessing ? (\n            <div className=\"flex items-center\">\n              <div className=\"animate-spin h-3 w-3 border border-white border-t-transparent rounded-full mr-1\"></div>\n              Processing...\n            </div>\n          ) : (\n            'Recognize Text'\n          )}\n        </button>\n      </div>\n      \n      {recognizedText && (\n        <div className=\"bg-gray-50 p-3 rounded-md\">\n          <p className=\"text-sm text-gray-700 mb-2\">{recognizedText}</p>\n          <button\n            onClick={copyToClipboard}\n            className=\"text-xs text-purple-600 hover:text-purple-800\"\n          >\n            Copy to clipboard\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AITextRecognition;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}