{"ast":null,"code":"// Local storage utilities for user session management\n\nconst USER_STORAGE_KEY = 'whiteboard_user';\n\n/**\n * Store user data in localStorage\n * @param {Object} userData - User data to store\n */\nexport const storeUser = userData => {\n  try {\n    const dataToStore = {\n      ...userData,\n      timestamp: Date.now()\n    };\n    localStorage.setItem(USER_STORAGE_KEY, JSON.stringify(dataToStore));\n  } catch (error) {\n    console.error('Error storing user data:', error);\n  }\n};\n\n/**\n * Retrieve user data from localStorage\n * @returns {Object|null} User data or null if not found/expired\n */\nexport const getStoredUser = () => {\n  try {\n    const stored = localStorage.getItem(USER_STORAGE_KEY);\n    if (!stored) return null;\n    const userData = JSON.parse(stored);\n\n    // Check if data is older than 24 hours\n    const twentyFourHours = 24 * 60 * 60 * 1000;\n    if (Date.now() - userData.timestamp > twentyFourHours) {\n      clearStoredUser();\n      return null;\n    }\n    return userData;\n  } catch (error) {\n    console.error('Error retrieving user data:', error);\n    clearStoredUser();\n    return null;\n  }\n};\n\n/**\n * Clear user data from localStorage\n */\nexport const clearStoredUser = () => {\n  try {\n    localStorage.removeItem(USER_STORAGE_KEY);\n  } catch (error) {\n    console.error('Error clearing user data:', error);\n  }\n};\n\n/**\n * Update stored user data\n * @param {Object} updates - Updates to apply to stored user data\n */\nexport const updateStoredUser = updates => {\n  try {\n    const currentUser = getStoredUser();\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        ...updates\n      };\n      storeUser(updatedUser);\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n  }\n};","map":{"version":3,"names":["USER_STORAGE_KEY","storeUser","userData","dataToStore","timestamp","Date","now","localStorage","setItem","JSON","stringify","error","console","getStoredUser","stored","getItem","parse","twentyFourHours","clearStoredUser","removeItem","updateStoredUser","updates","currentUser","updatedUser"],"sources":["/Users/jitmisra/Desktop/ralwayhackathon/frontend/src/utils/storage.js"],"sourcesContent":["// Local storage utilities for user session management\n\nconst USER_STORAGE_KEY = 'whiteboard_user';\n\n/**\n * Store user data in localStorage\n * @param {Object} userData - User data to store\n */\nexport const storeUser = (userData) => {\n  try {\n    const dataToStore = {\n      ...userData,\n      timestamp: Date.now()\n    };\n    localStorage.setItem(USER_STORAGE_KEY, JSON.stringify(dataToStore));\n  } catch (error) {\n    console.error('Error storing user data:', error);\n  }\n};\n\n/**\n * Retrieve user data from localStorage\n * @returns {Object|null} User data or null if not found/expired\n */\nexport const getStoredUser = () => {\n  try {\n    const stored = localStorage.getItem(USER_STORAGE_KEY);\n    if (!stored) return null;\n\n    const userData = JSON.parse(stored);\n    \n    // Check if data is older than 24 hours\n    const twentyFourHours = 24 * 60 * 60 * 1000;\n    if (Date.now() - userData.timestamp > twentyFourHours) {\n      clearStoredUser();\n      return null;\n    }\n\n    return userData;\n  } catch (error) {\n    console.error('Error retrieving user data:', error);\n    clearStoredUser();\n    return null;\n  }\n};\n\n/**\n * Clear user data from localStorage\n */\nexport const clearStoredUser = () => {\n  try {\n    localStorage.removeItem(USER_STORAGE_KEY);\n  } catch (error) {\n    console.error('Error clearing user data:', error);\n  }\n};\n\n/**\n * Update stored user data\n * @param {Object} updates - Updates to apply to stored user data\n */\nexport const updateStoredUser = (updates) => {\n  try {\n    const currentUser = getStoredUser();\n    if (currentUser) {\n      const updatedUser = { ...currentUser, ...updates };\n      storeUser(updatedUser);\n    }\n  } catch (error) {\n    console.error('Error updating user data:', error);\n  }\n};"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAG,iBAAiB;;AAE1C;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK;EACrC,IAAI;IACF,MAAMC,WAAW,GAAG;MAClB,GAAGD,QAAQ;MACXE,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC;IACDC,YAAY,CAACC,OAAO,CAACR,gBAAgB,EAAES,IAAI,CAACC,SAAS,CAACP,WAAW,CAAC,CAAC;EACrE,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAGA,CAAA,KAAM;EACjC,IAAI;IACF,MAAMC,MAAM,GAAGP,YAAY,CAACQ,OAAO,CAACf,gBAAgB,CAAC;IACrD,IAAI,CAACc,MAAM,EAAE,OAAO,IAAI;IAExB,MAAMZ,QAAQ,GAAGO,IAAI,CAACO,KAAK,CAACF,MAAM,CAAC;;IAEnC;IACA,MAAMG,eAAe,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAC3C,IAAIZ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,QAAQ,CAACE,SAAS,GAAGa,eAAe,EAAE;MACrDC,eAAe,CAAC,CAAC;MACjB,OAAO,IAAI;IACb;IAEA,OAAOhB,QAAQ;EACjB,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnDO,eAAe,CAAC,CAAC;IACjB,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMA,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAI;IACFX,YAAY,CAACY,UAAU,CAACnB,gBAAgB,CAAC;EAC3C,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMS,gBAAgB,GAAIC,OAAO,IAAK;EAC3C,IAAI;IACF,MAAMC,WAAW,GAAGT,aAAa,CAAC,CAAC;IACnC,IAAIS,WAAW,EAAE;MACf,MAAMC,WAAW,GAAG;QAAE,GAAGD,WAAW;QAAE,GAAGD;MAAQ,CAAC;MAClDpB,SAAS,CAACsB,WAAW,CAAC;IACxB;EACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}